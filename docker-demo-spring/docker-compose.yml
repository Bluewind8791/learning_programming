version: "3" # docker compose 버전

services: # 하위의 앱들을 모아서 서비스를 구성
  database: # 서비스 이름 지정
    image: mysql # 베이스 이미지 지정
    container_name: blog-db
    security_opt:
      - seccomp:unconfined
    environment: # 환경변수 지정
      - MYSQL_DATABASE=mysql-db # 생성할 데이터베이스 이름 지정
      - MYSQL_ROOT_HOST=%
      - MYSQL_ROOT_PASSWORD=1234 # 루트 사용자 비밀번호 지정
    # 컨테이너 실행 이후 실행할 명령어 정의
    command: ['--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci']
    ports: # 외부 / 내부 포트 지정
      - 3306:3306
    networks: # 지정한 네트워크에 속하게 지정
      - spring-blog-network

  application:
    build:
      # Dockerfile이 있는 경로
      context: .
      dockerfile: dockerfile
    # 컨테이너에 문제가 발생한 경우 재시작 설정
    restart: always
    ports:
      - 80:8080
    depends_on: # 의존성을 추가하여 MySQL이 로드된 이후에 접속 시도.
      - database
    container_name: blog-app
    environment:
      # docker의 컨테이너 안에서는 개별로 ip를 할당받기 때문에
      # ip 대신에 데이터베이스 서비스 이름을 지정
      SPRING_DATASOURCE_URL: jdbc:mysql://database:3306/mysql-db?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1234
    networks:
      - spring-blog-network

networks:
  spring-blog-network: