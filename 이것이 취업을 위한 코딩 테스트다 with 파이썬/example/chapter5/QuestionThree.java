package chapter5;

/**
n * m 크기의 얼음 틀
구멍이 뚫려 있는 부분은 0 
칸막이가 존재하는 부분은 1

구멍이 뚫려 있는 부분끼리 상하좌우로 붙어있는 경우 서로 연결되어 있다
생성되는 아이스크림의 총 개수는?

logic
1. 특정한 지점의 주변 상하좌우를 살펴본 다음 0이면서 아직 방문하지 않았다면 방문한다.
2. 방문한 지점에서 다시 상하좌우를 살펴보면서 방문
3. 1~2번 과정을 모든 노드에 반복하며 방문하지 않은 지점의 수를 센다.
*/
public class QuestionThree {
    
    static int n = 15, m = 14;
    static int[][] iceMold = {
        {0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0},
        {1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0},
        {1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0},
        {1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0},
        {1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
        {1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
        {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
        {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
        {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1},
        {1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1},
    };

    public static void main(String[] args) {
        int result = 0;
        // 모든 노드에 대하여 음료수 채우기
        for (int i=0; i<n; i++) {
            for (int j=0; j<m; j++) {
                // 현재 위치에서 DFS 수행
                if (dfs(i, j))
                    result++;
            }
        }
        System.out.println(result);
    }


    // DFS로 특정 노드를 방문한 뒤에 연결된 모든 노드들을 방문
    static boolean dfs(int x, int y) {
        // 주어진 범위를 벗어나는 경우
        if (x <= 1 || x >= n || y <= 1 || y >= m) {
            return false;
        }
        // 현재 노드를 방문하지 않았다면
        if (iceMold[x][y] == 0) {
            // 방문 처리
            iceMold[x][y] = 1;
            // 상하좌우 위치를 모두 재귀적으로 호출
            dfs(x-1, y);
            dfs(x+1, y);
            dfs(x, y-1);
            dfs(x, y+1);
            return true;
        }
        return false;
    }

}
