# n * m 크기의 얼음 틀
# 구멍이 뚫려 있는 부분은 0 칸막이가 존재하는 부분은 1
# 구멍이 뚫려 있는 부분끼리 상하좌우로 붙어있는 경우 서로 연결되어 있다
# 생성되는 아이스크림의 총 개수는?


# - input -
# n, m = map(int,input().split())
# iceMold = []
# for _ in range(n):
#     iceMold.append(list(map(int, input().split())))

n = 15  # i
m = 14  # j

iceMold = [
    [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0],
    [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0],
    [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0],
    [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1],
    [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
]

# 특정한 지점의 주변 상하좌우를 살펴보고 값이 0이면서 아직 방문하지 않았다면 해당 지점 방문
# 방문한 지점에서 다시 4방향 살펴보고 다시 방문 > 반복
# 1 2 과정을 반복하며 방문하지 않은 지점의 수를 센다

visited = 1
notVisited = 0
result = 0


def dfs(x, y):
    # 범위를 벗어나면 False return
    if x < 0 or y < 0 or x >= n or y >= m:
        return False

    if iceMold[x][y] == notVisited:
        # 좌표 visited 처리
        iceMold[x][y] = visited
        # 4방향 체크
        dfs(x + 1, y)
        dfs(x - 1, y)
        dfs(x, y + 1)
        dfs(x, y - 1)
        return True
    elif iceMold[x][y] == visited:
        return False


for i in range(n):
    for j in range(m):
        if dfs(i, j) == True:
            result += 1

print(result)
